#:分支合并
	git branch  newName   创建分支
	git branch -m oldName newName  修改分支名称
	在合并的时候，如果有修改，就会出现冲突，除非这个文件每次都是由合并而来的，本分支没有提交过这个文件的修改。
	另外，当合并过来是增加了内容，这个无论本分支是否修改都不会有冲突。
	当有冲突时，打开文件 针对>>>>> ===== 之间的内容进行选择，然后删除符号，add  commit ，就可以了，这时分支合并完成。
	
	git reset --merge  回退合并
	
#分支操作
	1. git push origin new_branch  推送分支
	2. git checkout -b branch_name origin/branch_name  当pull分支到本地后，需要在本地创建相同名称的分支
	3. git branch -d branch_name  删除本地分支
	4. git push origin --delete branch_name  删除远程分支
	
	
#差异比较：
	git diff  		比较当前工作与索引的不同
	git diff HEAD  比较当前工作与版本的不同
	git diff --cached HEAD 比较索引与版本的不同  可以不写HEAD
	git diff V1 V2  比较两个版本的不同  只需填写4位版本号
	git diff --diff-filter=M 只显示修改的文件，删除，增加的不显示

# stash 用法
	git stash save "" 保存索引和工作区
	git stash pop  仅仅恢复工作区  但会删除这个暂存
	git stash pop --index  恢复索引和工作区 但会删除这个暂存
	
	推荐组合使用：
	git stash apply --index
	git stash drop  删除暂存
	
	git stash list
	
	以上操作都是最近一次的暂存，指定使用git stash drop stash@{0}  
	
#索引 跟踪
	如果有文件没有加入索引 (没有add)，提交就会提示untracked ，不想将文件进行跟踪 使用
	git rm --cached FILE  ，本地依然保留文件，commit后，新版本库里将不再有这个文件。
	
	对于add命令，执行一次就可以，如果又更改了内容，必须重新add，否则commit就会只提交第一次修改。
	当commit时，提示unstaged  表示 索引里面都已经提交给版本库了（没有新内容），但文件却被修改了。
	
	git  checkout  -- file    可以使用索引里的内容更换工作目录下的内容，即放弃更改
	git reset filename  就是放弃已经stage的修改，全部清空索引，索引和HEAD保持一致
	git reset --soft    索引工作区不变，只是将HEAD重新指向

1. git pull origin new_branch等于 git fetch origin new_branch +git merge FETCH_HEAD
   git pull   得到所有的分支
2. git fetch origin new_branch   将远程的新分支 更新到本地 
    如果出现 Already up-to-date 说明代码更新好了
　　出现 FETCH_HEAD
　　使用命令 git merge FETCH_HEAD
　　当然 我们也可以git fetch origin master:temp建立新分支temp，将代码合并到新分支temp上，在删除新分支temp

3. git log --oneline --graph  显示版本进化情况
取消换行符更换：
	git config --global core.autocrlf false
	
git add -A stages all changes
git add . stages new files and modifications, without deletions
git add -u stages modifications and deletions, without new files 


#疑难
cannot lock ref 'HEAD': unable to resolve reference HEAD: Invalid argument
	Step 1) - got to .git\logs\refs\heads and open the Document named as YOUR_BRANCH, now copy the ID -numbers in front of your user name and email-
	Step 2) - got to .git\refs\heads and open the document named as YOUR_BRANCH delete the line and paste the ID in.


#技巧
显示文件夹和分支名称
在~/.bashrc  添加如下 再source ~/.bashrc
function git-branch-name {
  git symbolic-ref --short -q HEAD 2>/dev/null
}
function git-branch-prompt {
  local branch=`git-branch-name`
  if [ $branch ]; then printf " [%s]" $branch; fi
}
PS1="\u@\h:\[\033[0;36m\]\w\[\033[0m\]\[\033[0;32m\]\$(git-branch-prompt)\[\033[0m\]\$ "

#添加公钥
 ssh-keygen -t rsa -C "1079339766@qq.com"
 一般会在home  或则 用户文件夹下面的 .ssh 文件夹里面有id_rsa.pub
 将其内容复制，然后在git里面的settings/SSH keys  添加公钥即可

